{"version":3,"sources":["Navbar.js","components/Wheel.js","components/WinnerModal.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Wheel","state","wheel","spinning","width","height","onSpinEnd","selectedSegment","props","resetWheel","drawColourTriangle","spinWheel","animation","spins","Math","random","setState","startAnimation","stopAnimation","rotationAngle","draw","ctx","strokeStyle","fillStyle","lineWidth","canvas","beginPath","moveTo","lineTo","stroke","fill","updateWindowDimensions","dimen","min","window","innerWidth","innerHeight","setTimeout","segments","this","addEventListener","Winwheel","canvasId","responsive","drawText","numSegments","length","type","callbackFinished","callbackAfter","removeEventListener","Container","Col","Row","Button","disabled","onClick","Component","WinnerModal","Modal","show","size","aria-labelledby","centered","Header","closeButton","Title","Body","winner","toString","Footer","onHide","getRandomColor","color","i","floor","App","numEntries","React","useState","modalShow","setModalShow","setWinner","fluid","Array","map","val","index","text","textOrientation","segment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53360f73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar as BSNavbar, Nav } from \"react-bootstrap\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <BSNavbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\r\n      <BSNavbar.Brand href=\"#home\">MealWheel</BSNavbar.Brand>\r\n      <BSNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <BSNavbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#home\">Home</Nav.Link>\r\n          <Nav.Link href=\"#link\">Link</Nav.Link>\r\n        </Nav>\r\n      </BSNavbar.Collapse>\r\n    </BSNavbar>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Col, Row, Button } from \"react-bootstrap\";\r\n\r\nexport class Wheel extends Component {\r\n  state = { wheel: null, spinning: false, width: 500, height: 500 };\r\n\r\n  componentDidMount() {\r\n    const { segments } = this.props;\r\n\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n    if (this.state.wheel == null)\r\n      this.setState(\r\n        {\r\n          wheel: new window.Winwheel({\r\n            canvasId: \"wheelCanvas\",\r\n            responsive: true,\r\n            drawText: true,\r\n            numSegments: segments.length,\r\n            segments: segments,\r\n            animation: {\r\n              type: \"spinToStop\",\r\n              callbackFinished: this.onSpinEnd,\r\n              callbackAfter: this.drawColourTriangle,\r\n            },\r\n          }),\r\n        },\r\n        () => {\r\n          this.state.wheel.draw();\r\n          setTimeout(this.drawColourTriangle, 1);\r\n        }\r\n      );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n\r\n  onSpinEnd = (selectedSegment) => {\r\n    if (this.props.onSpinEnd) this.props.onSpinEnd(selectedSegment);\r\n    this.resetWheel();\r\n    this.drawColourTriangle();\r\n  };\r\n\r\n  spinWheel = () => {\r\n    let wheel = this.state.wheel;\r\n    wheel.animation.spins = 8 + 1 * Math.random();\r\n\r\n    this.setState({ wheel, spinning: true }, () =>\r\n      this.state.wheel.startAnimation()\r\n    );\r\n  };\r\n\r\n  resetWheel = () => {\r\n    this.state.wheel.stopAnimation(false); // Stop the animation, false as param so does not call callback function.\r\n    let wheel = this.state.wheel;\r\n    wheel.rotationAngle = wheel.rotationAngle % 360; // Re-set the wheel angle to 0 degrees.\r\n    this.setState({ wheel, spinning: false }, () => {\r\n      this.state.wheel.draw();\r\n      this.drawColourTriangle();\r\n    });\r\n  };\r\n\r\n  drawColourTriangle = () => {\r\n    // Get context used by the wheel.\r\n    let ctx = this.state.wheel.ctx;\r\n\r\n    ctx.strokeStyle = \"navy\"; // Set line colour.\r\n    ctx.fillStyle = \"aqua\"; // Set fill colour.\r\n    ctx.lineWidth = 2;\r\n    let width = ctx.canvas.width / 2;\r\n    let height = ctx.canvas.height * 0.05;\r\n    ctx.beginPath(); // Begin path.\r\n    ctx.moveTo(width - height, 1); // Move to initial position.\r\n    ctx.lineTo(width + height, 1); // Draw lines to make the shape.\r\n    ctx.lineTo(width, height);\r\n    ctx.lineTo(width - height, 1);\r\n    ctx.stroke(); // Complete the path by stroking (draw lines).\r\n    ctx.fill(); // Then fill.\r\n  };\r\n\r\n  updateWindowDimensions = () => {\r\n    let dimen = Math.min(window.innerWidth, window.innerHeight, 500);\r\n    this.setState({ width: dimen, height: dimen }, () => {\r\n      if (this.state.wheel) {\r\n        setTimeout(() => {\r\n          this.state.wheel.draw();\r\n          this.drawColourTriangle();\r\n        }, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Col>\r\n          <div className=\"d-flex p-4 justify-content-center\">\r\n            <canvas\r\n              id=\"wheelCanvas\"\r\n              width={this.state.width}\r\n              height={this.state.height}\r\n            />\r\n          </div>\r\n\r\n          <Row className=\"justify-content-around\">\r\n            <Button disabled={this.state.spinning} onClick={this.spinWheel}>\r\n              Spin Me\r\n            </Button>\r\n          </Row>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default function WinnerModal(props) {\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Modal heading\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{props.winner ? props.winner.toString() : \"\"}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\nimport { Container, Row, Col, Button, Modal } from \"react-bootstrap\";\nimport Navbar from \"./Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Wheel } from \"./components/Wheel\";\nimport WinnerModal from \"./components/WinnerModal\";\n\nfunction getWheelData(numEntries) {\n  return new Array(numEntries).fill(0).map((val, index) => ({\n    fillStyle: getRandomColor(),\n    text: `${index}`,\n    textOrientation: numEntries > 6 ? \"horizontal\" : \"curved\",\n  }));\n}\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false);\n  const [winner, setWinner] = React.useState(null);\n  return (\n    <Fragment>\n      <Navbar />\n      <Container fluid>\n        <Row>\n          <Col>\n            <Wheel\n              segments={getWheelData(6)}\n              onSpinEnd={(segment) => {\n                setModalShow(true);\n                setWinner(segment);\n              }}\n            />\n          </Col>\n          <WinnerModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            winner={winner}\n          />\n        </Row>\n      </Container>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}